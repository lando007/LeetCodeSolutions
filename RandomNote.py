"""Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.



Example 1:

Input: ransomNote = "a", magazine = "b"
Output: false
Example 2:

Input: ransomNote = "aa", magazine = "ab"
Output: false
Example 3:

Input: ransomNote = "aa", magazine = "aab"
Output: true"""
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        #sets x and y to 0 for counting
        x = y = 0
        #Add variable count to make sure that value doesn't equal length randomNote
        count = 0
        #Value to reference the length of magazine
        magazineStart = len(magazine)
        #Iterate through each value in randomNote to compare if a value exists in magazine
        while x <= len(ransomNote):
            #If the count equals the length of the random note then all characters have been found equaling True
            if count == len(ransomNote):
                return True
            #Else if the length of the randomNote is bigger then the lenth of magazine then there are not enough values to make the randomNote
            elif len(ransomNote) > magazineStart:
                return False
            #Check to see if there if there is only one value in magazine and randomNote with the value equalling the same. Returns True
            elif len(magazine) == 1 and magazine[0] == ransomNote[x -1]:
                return True
            #Compares the last value of randomNote and checks if the randomNote doesn't equal that of the magazine if so returns False
            elif len(ransomNote) == x and ransomNote[x] != magazine[y]:
                return False
            #If the value in randomNote equals that of Magazine  then there is a match and removes the value from magazine so it cant be used again
            elif ransomNote[x] == magazine[y]:
                magazine = magazine.replace(magazine[y],"", 1)
                #Adds to the count value so it doesn't go over number in randomNote
                count+=1
            #Checks values in randomNote and magazine and starts iteration over magazine characters to find one that will work
            elif ransomNote[x] != magazine[y]:
                #Continue iterating over characters in magazine until there are no more
                while y <= len(magazine) :
                    #If a value is found that matches then remove the value from magazine and add to counter
                    if ransomNote[x] == magazine[y]:
                        magazine = magazine.replace(magazine[y],"",1)
                        count+=1
                        y = len(magazine)
                    #Exception thrown if the value is greater then the length of magazine and throws False
                    elif y+1 == len(magazine):
                        return False
                    y+=1
            #Resets counter for y at 0 for another iteration
            y = 0
            x+=1


value = "hcjageeebfjefbfjdhafbcadfhiggabcgibdhcggdajghjfcdjdahddefefdcadgddhibdeageggcgccchafceicjbfgdjaaidgccjabjdgciacjjjebiicijddeajiedcgbgabfeabhgjadccfeeeegcbcdbffgedaeafccdjcbdhdgbbdeadgihgagfdhcdjdgiiaghbahhce"
value2 = "afjfjagfjedibihagddfchdjgihjaafhdebfjdiagdghhgecbjbhdhcggaagaaeiigiaijgdhdggeadfjeicjgeefffabgigjedfgihfdgfjcaaffehgbdehicddhbcghigacfjhgcdahibdbhjbfihidcbeggccfaicccbhgdbgbbdiaabidjgdebhgegefdheecijfbggidgaaefhcfjjbjbcfdicahhfjgfhcdifbjifabiccfeifcieacdgfdfifcjedehhficibgcabhichddgcfajhjggiehbjcjgjcjfhheehbijhehaheeefefgfidieggefeedddgaajaieciahjhbjieebjfbgahbagedfjibbgjecfaebejfffbjdhibdhaefjidadaejahafdjfejiicfifbhjghcfhidgbheefaeeffgajfebibicdbejhgfhcgbceihbcddddbidfdehjfiafjijbgcbbfdaiibcefdibhdcaijihjfdidfedfejhicfiebbheaahcjgacechfhbbhihedcbegiijidigfffihiibiahdbafcgihjcagfdiccbgiefgbebjcgjbcggbdihjffadeacjaicgbiggbicacabjahdcjddgjgdhhcacbchhfhhhjfafifbecigcacehhjeafgdaibahhgiijidiibdahbigabbadfaajdcjihggjcgdacfdajaegcehhjgdchbdccacihaahiacjhgiebhiejccjbaajebfggdbciffceibbeebcaicgjfhdgadibigbegechbdgdhgeebdabeedjgfefigjdjbdajjjjgaegbiigdecfiijfdccidagbgebhbchjibcgbbjhhjhbdceiibfajfecdfdihhicaegciafegaedjcgecibbjedgjghedehiejbdjijgdgheeeadaajgiahedjciajgciifiifgecdgifejjbjibadhdfghjieiccddhjbdhhcchfbbaiihjijigifcgeajajjfbdehhfbjaehehddhfbbcidihgfddbdjfibicdfhjcfbiiejfjfidjgjbaffdaefcbeiaceafibagbaiggbidcjdgadehheeeiaedbcbjjccdcgfheechdbecfigbeeebhcaajbifjhdegegjecaahbgjgifgcfbgcjacjbbgijegidjeejihgabaiijdgchhchefeiiijchedgegbiabfhfeejdhcbiejcefeedaajbjefbcceccdgifgbjbbeaejbifeedgahcadhfagacabbjhddhiecbbebafahdcggbaidhiegafifgahjjbaecifdihecjhfgifebdbejjbghehdghjcefffbejbbefeghfhbejdgjhgbibdbdbijceffficdcghjieeiejjjfgcgiiaihdciheadjdjfjbhacbgfhfcdejdbiifcdhfdgjchegahdbijbhgddjbcccbicjjhajbjjhhfabifejbegcbjgefhbfeicdhgaihfefaddcbiceafiahddidbhjicjfdaedejcajdeiebcbcbhhdfifcggeegecahbjfieijjiifccdaahifeicacbiedhigedjfdgbjafdaefdiiegfdijbcgigcdhfeeidiffgbaidgeeffcaceeachbibjgicjjhcbdijjfggihihebdhaecdeijjaafaiddijejbgcgghibddjehiiajafddifgfaebahgjbcdjcifjdgbidgegdbgacgbidhbdhaaehiecfjgbebfajfjaehjjbhhjjfihchaiihjbhfcifjhbbccgdbiehdffbfdagebibedcfbbcbhfiibfgiajaaeedaegcijbabcgaifajbgdcafjeijhhdideijfhhhhgdjfhbgbfgibcaeacjagjjhagbfeibjhdcdjbfafffhbgdhagjhefjdbfechjffdbdbgjcddjgiecajjabafdbcgfccjbjcaeecadffbjeeebacdgcdbjjgdadcicddjjacjcahcgafeiddejdcicdhjfdhjecgadjfbgafiidefaigdgjjgahcjfdbjebhghfahdfffgaedjjcebigadcafehfagdhjejdjigaghgfibaeaaejcaieicagegfdgficihcbjeceacagaifhgjggcifechdadjabeefgchiifiihidadcbijjgjcjijhefffaciejejbefdaijhgggahjiddfejgdagjgbjgihichbefhiaieebigdifjcebfgbjdbhiedajaijbabbfggegdhfibbhfabhghbgfadifdaifbjaeacfcghgjfgffghahhfhaggbheagdfaegiegeadghfgbgadaadchfhgedjhhiacbdddcacdgjfgdeiajagifghicciacigbaejcbfacjcdihhaabhajgccaadbfiejiiccgiaiegcaicbidbgfcfcaiciccajfaffiaihcdifeiegedaabhhfjhffeafjgjdejdghcecegdecejjjcbggbhgejihdifagdgfbbdhidebachaeacdfjecdijjfhgideeefiadfhegfhhaididchgceijdacccifiibfibegicafccjeabiaafhfifbbgcgaehabfjgijgdcfjfhecihfagjiicihffjigfacffbafbecabiejcejbdfbjidhdfgcififgaaidejfbabfhjdehgbhbaegbdfbidjijiegbahjfdgaiagfhbcihadjhegcdhbaedbggbeighbajjfiacgebbaghbdbghdjcjeabaigjiaffhhfecebjeejidgcgajabhdjhbibgafhbiibhigiihfdiijdebgdcgejheiggibgifgedaciabhagcfjdidedddacahiahccbbjagfagababcgeifgagbbgfiegbihjdjgbcdadgjhegjhfijabdjacagcdfefhhffeaedjiidddchfgieihgebgefeedabgchaaehdjiihjijfhjfhfdaejfeaffgagiejhccccbfgiigcfbcdbgbadjhaijcchcafcjbceaeagfaccjdhbebhdabajgbghhfajejbhhcgicbeechhibdffigjdfjfgcadigcjfieejhiidchejhecdajjdbbdbifgiabgagdbebhhbgdeajcicidafddfdeidhgjicajadecdahbhhacebicgbigjchaabhahbbcggcdbieedicfefefdefbjafcdgjjcjcfajcdahcjijfbhhjihagibcdgbfeihghhiabggfabbhgihabijficcefadefcecefjedjidhaejfdhbeafdgfgghhdfhadiedcdcdaefgifbjhbidajhegacaegggghhgfjbdbchhidcjhfiffjgccdbeihebhecbfigbjdddaieachegebaehefgbhcdejeiebajhegeieeiajfahfiifjhaffejaacbcgcjgheeefhbchdhghgccidieibahgjjedfbbcifiejadafhfibdfhejegfjcgbjgjajfedbjaiibaecfhhgddhegdggcdbcbhejajbhcebjhhdeebbaghgeciejddjebhedjhdgbeicchfjjahfhabdjhfahgdbfhgjhdhffcaajebiiafiafbdgcafegghbcfgcbecaicfdhcaeahghhhehiccabfahabdbiceggjicjgjfjijiffaihjcgddcffchgiabdgeebjaiiiahbgbfigcaagbhbhfchfbhfaghabfahfjdefefahbjagfjcjfabgeihiifdhedjijijaggaicdedbaheicefadbiifiggcibjbibeifabbeeebacifbbhcijhgdgcddceiadhgddgjacajabifecebhechafjbidjffgcbcjafaaajbjahgadhgiiijijhgejegcgaejhbgghfbffahggbbfceijbbigidiefhdcbiiicfeaegjecdahbejjjcfeeefcaadcgeddgeiieieicedbiibiadagebfefeadjfbejbifgfcacjfafhaggidgeijjheafdidiijajhhgbiiebfhiaegjhhdecegecfeehbabhefiajjjfibhebaidadehfbcdgdihgeedbiffihefhejedcaeahcafehhccdggdhjdcdgbbccceidhihheiediaaejigiifgcfjdejgddggccdjbejagbdhjaedhjfajiicjhehjdceieiiajgjgcihchbhffcgcefajhcadeefgheaajfcgaihecbfeehfdihccfjhhibagfabjgficijehabijecjaidbgjgfahbdecbfifjgfgehafadicabgjcbcdbfgefhiidehggdbjgibbbdddjejdfccidbabbhighfjjjfdfigbaaiiiefhfgffhieegehachgbfdaeibhijaeafgichcdbbbbiibaegebhgddghegaehadcadgfiaeahgichfjgccfbbbhcaeddijiidbbajdgcbcgejajbeigiggdidjebjbgehfdagfdhgedafaddjdhdaiefecjjjhhjfejjgaejdedbahcggfgddejjidhjfefbdgfegjcbdhbffiggiecacgedadahjigaabegcehjibdibebbgjdggafdffjdeaecgdhghcchfbggghacbjfebafbidadabhbeaefgifjcgceaagidjiadjeeaadjajhfbabgcaaabijjjfdejjcihahgffdjcdhafdhcejdfbgcjbdicghjdfhjfcejdfedibjdaheecfafcbdbabgchebecdebjgeffhefhihadbhdcfhebbddhcdbiggcbefhcadaficdahicacefdhgdjdhafgaceaefaahcicdiceafecbeciijjdaefggjfiebeebdgcdgfejacbidfccjcgcjaabfajcdibhbgjefhidjbedagcehehgjcaiefjhecghaaeebdfaecicegafbcffadfiijjfidgaagebgggadffgfbhibgfdghhcfgbgigbbjcaiiggfdajhcfjhiafhbihgdgeffechdaadadcgaebjefffddgcbaigjchbdddiddgadddifdhfddehcbfcfdbhfaaighdedejbhifgibccdhabagbdhgdicaibccifbcjjhchcggjijaibdcbcjafhfhbefebiddfdbdggjbbhebeabcjgddgdbhagabhijbeajdffffdaifjhedaefjbhbbfcfhaibhbadadidigbeijjdhihdbifbhfgeajhbfhbdibgjabeggdfcaihbjgegffdjigbedbaaaicghgjcbcfgfacbhhfheeiiieheadigjfcgiafefibbcfjidjacahehfjcbecgihageiehibdagbediahdchjjiaafaaachceheejjadcfbdfihjahdcffhdeeecacfjjaedifddjcecibfgabfajdaigeegceccjdcgahdhjccgidejgcgciciifdfdfeebdjiecidghieafieeechajajafhbbigfjagfaiggaieedabdcggaehigfhaichhgeafdbjbaffabdcdcbffachdcddhfdbciecdbfdchfjfbiaeabideacjbcgecaaejgiedehijadgiejjfgibijdbbiabahhdighbiffdebegabceicejjheijfafedacjfjdggahhhgahigebicciccifjfjebcbebjbfbfhdbeefgeggjifaecaaahbabgbdicfehcjedhiabgcjcbaechfgajdhjfbcbhdjgafbjajehffhddhihifabjchdebfihgdahfggaidcebegbdjjicegcehbjahegdiiiafaagcfcbdaegdiibigchbjbceffihbfeidhdjhaefbbgagjbaiafgjacjjicifjcbiidecbiahfjebibdabfcibddffcfadhfbbijagahbeidiffdaggbdebehfaaefiebbcgbjbhhbgfifjbbegihifcfjfhjddjgejjaddbjidgdhdigfddiaiihcehcijfaeiggefegadcdcaacadbdiejadjecifeiceagfcahjiefhajdbdaajejfidcfghiedifaeiicceajfhbbbhbbjfdibeghjbhehgjajgehehebjdaicbgdbffdhdgjaejddfecejcgidiajbiejefebehfajdfgbbibbeaijagfiagibjjhheiahhibcefgghgaafhdeejdigiabchiajfbbjadffadgabigdhfbibhjcebfbgdebibhbcgehggcidaigiifgbaddieiaeghbihhdggcaajjgibehcbbibhcefifdiecjbdgicicjahjgejaeifbhadbfjfjafjcajabgdgjegiegicdafdbhehhfjfijegfceaeejfbcfafdabcchchfbefebheibeehjhcheeeafbhfgihcgcdegbjajjaeaacjbifbbhijibhbiefeahdajjbjaajfejfgceagjidejjfgdaddeijbhicgedfcgfcjaeefgjbbcedabbddahfiabjjffhifbcaffdfccjdhdbccagbajfeejfffhcdbbfahdfgeaiebcbfgiihfjgjafgbhigfcegajcfhebhhigbadaaccihcggcbchaicefgibaageegfcbcgddgfhbbeddfigfcjaffiabjgjdiajbjchdhejcijjddfejgjjdcbefihejghchagjffeeajhaijddbcibhcgcehiebifcgbiajadjegebadjbcaabaajhcibeibacjecdabdcjfdgjfefehhfgaaaahgijbjajchhdgcdchdfbgacjieacjcjfbfccfefechdhgjdjiabfifieaaafbjjeehhfdhcidggeihdhbchchbhccaidicchbafhebeiihjgaiajjbhfjjeaegfbijcijihdbcahdeddgafbgddaedbgaecehaejaaejhebccgcdgjeegeehgjdacfcfdefaaedafaidcfbiiecejecjbegifgdagbebgjbehefcbbdifjidbeibjjgejccdjjedjchgiedjjjffdedehfghhijaihhfejbjheifidegifcfdgdjdegehbdaedhjgdbcbbibijjbcdejhfiijfgbjffghcibcdicbfafcfiedacgggefdbeejaegeebiigfcdejggbjdbdeeccfdgidgbeegfbdbgjeehagdcbiabhbieaibhceebhiehdgeeibhjbecbccefifjechbfgigjicaaabeibegfbcfbcjebebjdcdgjifhghaddcaabgbbfhbheibffdgfdgbdhgeacgjeeecejjdbdcibbidbhbjfbciihcehacehjbjagaaiiacbgchefhdedchaadafgidfiegbgfhbijjgefidhbejdgffcabifihbcdccfgbhheedebdfbjfehgfadhjffiafbecajbeibfeafeefhjhefciibedfhdeaagbiiighcicgehaficdgbbfhehbgjdaigahiiihdaejgfgjfgagabiicjhajeghgdfbchajgfhbgbhghhhjdgcgahaagahifbbfdcefbcbehgddbhihgidifagceaegfgicidehjhbdhgbjhgahdffjddedaijffggcjchaaijehdjddbheafbahidheahdajhebbhiijcgibjejhhcgchdcfdffiafcddjhgcfgeeieebbdcdeicdfjcgjecdhgbcdfbaijdjfigbjcfhffbiiffbefjaiedafceggaagcejhdhibabhdhgaagjgjjdhhhhghdijjgfhfbhbgaaficeidebdjdifgiihfjbgfhideceegcehfggfejhdejjjaahgcbhiaacbddcfdhcgaijcaedachbbaifbebhhafbfjdiiccijjihegaicegijedjhcaedefhfahbhdeaibbdfeibdfgjaagabbhegiacdiaehdjifhjcjghbjdcdchadjhdiccfchadbegaffbhaeihbccchegbiccdbhedfdjfahggfdfjgijjffchhjeajccibjjieaaffhieijcadegajcbidbfbhdcfcfihegjfgegjeaedhcbfgggbhedfdacibddeidcejegdigdbjfijjaefdgggdhaagbigifddiidfhjgjbjffeghgbbgjggjhhhhdggcjjffdaffccdegcabjeefhdbdbajjabcdbabiijiefdbagciaabbhegihfcbdggbcfajhgiegcciiaicfidagbgidibfbcibhiifbeacbggaihbhfegacigfdccfdbdeaahfgfaciihcaijjebfcciecidgjbhgfbabbaaefhbcafghiiiahfhcbieiegjaciaedcejgaeejjegjdhfaggjjghcicfdfjbfbijehigffidcacdihhceggbifjbgibchciibgdgicjeabfaegeaeccbadaihdhgaacahbeaiecgjeijhdgfcfjagcghigbcdafifijhdjchfgichbediiddiafecdbijddejechghbggjdifajfefgdibhdjhihhhagceccaifigdaiichhhjfjecfhdacbjijejijjbddicjgiafaicffdcbhfiidebejgajjfiifdcbcggfacjjfefcdhjdbjgdchhdbjgfbeebejfjfedbfecgdifbbjdiifdcfejcighdcffgbhjfhficgbfgajjaafhebgfhcbefgdeiehfjhjhdbhbigiihijacejdahifigcfiijeajabicfbbfihcgbdiahcfihehabjahdbfeddhhheddjbfdhchcjdaebiaafjacccaajiccjbdbbecfbffaaiejeccfbaegaicdhcgacgfhhiheihdehhjdghhiciccajhdfajdiidhjaibbjjfbagijadjfdhchgjfedefaghcbdecjjdhihegcdeicchcicifhbcfdcdjjdhagiagggcbjieieahfidafdjibaddaebebbhdbehbfdijfceeecafchchaiiffccghdeghggbdhegfhieicbijaefbejabgjjdjdagddbgbjhdggchdfhahgdddhgagchhgjdagjabhbjdchdhbfbfgdjedcdebbebcfddajiacefjiieighfhgdgefdfdcbeccigbaaehbcbcggccbafeiaifdbggibegihcbieijghbaddjfhddahhafbgeagaabfejgdbibfbjecccfcacccbhejbfbjibaffdebaeffgjaacjiaahaibjchajhaebebjcddihdccgaehaecaacaafegggghcbhcfggfijhhhgfdfbgacebfcffdgjdjjfjhiibgcfdfgjfchcdhdfjajddhbccfejhhcicfidajejceebgajdedaeggjjdahabibegbiificgdgfgbidafbiahbaadbfgfhdajfbacgieeafdgegehhbfadjbhbeidaeehdhjdiifhhgfchgbgiidfbjehjdbcdcfjaaagejjjacegichgfaihabjhchbchggadeeedaahecadfehbdfhcbdbghcbbjdhbhcjbbiidgbjfhbbibiaihgegedeajgdfccafbdejjhdigggddjieihedchjahfafechdchaicdecebfaehjcbgbhccddgdgifgiggcigdhcfijcehdchhhbhbdejcahbdhhgeiiffaebbhjhhjhfbbiiibhhgafhjggjadcdchecifeadggcafcabgadejacfbbidadhaccggcfeihcbjabfbjjfgciaejgdfaeiagfjddjejefafijhgadibdefhdbgfghbhcheceiajdifajdfjajeaaccffejaifjhfaiaaejdafdfbbaeeihbibajgadfjijejeagibadjjjehhgagbgcacdaahjdhaadaicfifbicebijhfchgjcaejbibbbfddgjiiieccjhajfjbhhbdjddccfhijaibjibcjedaafchjgdbagbficiibfbebciicgiddeebjhjbjgcfbfgeecbbejjaggehedbjchhffbgjihgadfggiabghiifjjaaggbidbdhbjhddihgigghibibhjibegjcegcibjjbeggigbffeabfadjbfbfffacgaijdaaicaigadfjjcijcfbjcjjafiihchcjgihajheaiiiaegfhgfjgehdifhbfajheijfdbjddeijggejgceafhgcghfdddbfhbbhgbeabgebebjieehiabcchhbbjajfhideijjeeaiddbhjcibcifjibbjjadfbibgaiabgfbigbegdecifcfbcagfdfdgfiieaiaigjdiidfbifeaefgfbhcgeacghifbhfgijefjgheddgegadbeabaihheeijcggeibdbedgibidfgibgcifafbajhegaahihfehfgcijaahjeccehjfhhiddjcafjeiibgdajhdaddgeegbfejgjgjjiafhicejchiibjdgifjidjbadbbjcgdehidjdabiijhbfaeicbhdhbfeebfedhghehaahdjibcicibagefggcaaigefahaadjeggicjdbigejjggeaifhgdchfcgihahhjgdaiecaeefbiaafedfdffiicdjcbigjdbeheeigcdicfcaddcbciahiiagggcbffjaafhidgfjdgijcjjchcghbffcibbjidachhjdfaihihdhgaajdhgficdecebhhbccehgagijhhcccgccfecabgjceieebacedfhfgabgaijciahfhehcdbbehhdhgcahgbfdjjedfedihfccbeebcgedchcjegcbgfdicgbdajghigfhifbffbdgcjhcdiigecbiicfaebjejdbcfaicghgagcfiicfgiifacigffddidffihefhhjfifecjidfihfbehecgiieedfhfdjaejdijgaafjgcgjgfieebbjcacgbddifiggabihdfccaaaeiebcdjbbgjibeehdbdjfdegbfdcbfgfdhcbachebddbjhjbdceffgheidgicaeifajajchchddidgibcagbfaffaecdccfjdihffhceebccceiejgdbecidcegcejjgcbcjffjcibahaibeebfbdagahcgjhgbfciccgiaeeeifagbejbbgdidbebeicbdidcdejgfdihigiccijbccghjjghaefbjhahehbjecjiiigdagfachdaejbgiccjicbgjffbjbceafdedhbcegjaafjbcbahhddiidcabeecifcajjefiefhjbafccdfggfjgaccdbaihjbbdjicefcbidhfacgeahedjggedigcbiafbfiiijjibhjjbceghbfdhdfhgdbajgeecfggiafbbjjbdbefddeceeecegjhcbdijgddgciabfedaeddgbefdfehffcjaaadacchhfdjjiefedjjebhiigigdijcddcfdfcefbiabbdjfijafaihjebgihbhhccgjaafhcjeggcffhfcbefcfdaiijdeiabcjfajegfbhbdbihcdcbjbihibcfiaefghhcbichdbgfbhbiijhidechhbchicbfcjighhhgfegibchiacifjhbgiebdjcchfcgdajhebfdegdiijfaaaibeeeceibhfajdadgcdcbdedhffchiiibfbcbfehiacibfcdhfdgdigaegbajjfcgejbbgdjafiegeaabhfebeacghefeccefgicgadfbcdfheeeccbabffhcchighfjecbiegfidfgibjhachdeagdgfiacbdcaggjjbeehjgbgieeeeachbjjheddadjciccggebiceggchhdjhjgaebjbheahjfhceagiedhgdhebefchggbbcdbhggaeegjidiicccjdccifgbcaebeeibgihhgahifhihifgebhjcabehjbfbheihihhgccidadfhcicfebihacafdjjifjdfeifgibddfjhfjidfgadfghbadcbbcigjaaggidhfdheehieejcajebebaiajecdeiehbhjdhdebaifacjbiefgbedgiacibjjdehgcciebhcjhbecgeegdgaecggefbahjfbbdabbheffbjedejehiibbbddgghcgggbgjfcfjbccceifhfciiejigfdbahdhgdjfjbaeddcefgeaadejfjidcjdhjajihjfeegagecfbfdeafdchageeaejagjejcdbeiehdjjcfbjeegagfifhdfaehejhhbfdgabicjgjfaecibfadegfaejideheihjbeajjehieiacjcciaddejhbecahdgbbffcgcfhgahccgbjgijfjgjfjaaaefdaigejbdeffeedfbedfjjcdacfbiafcecfbaadgjiifbfcgcajaifebjdgafjbjfdfjhcgbfdihhafebjheaafgaigfbdiceeejadbahjchdbceebdfdggihhfhadefcebaefcifefaidcdeaafgjagfhchffhgcachhaghaijfhideacicicbhfdgbfibiggdgchhebfijggfchbfajedbdjagaiceidfcjbhdacdbdfjjiaaaedhhagjafdjfddcibibcchiggbgebfgggabjheaifcfecegfbddfgedjfcecgjgdfdjeajaeaaajgcfijihgejfccefagfidbcdadbcjddgcifehcbaibeiaeidjgiccbfigbafahcejgfgjfcecchfiaggeibefigdjhcffadejccjeffhjhgcbbiheaecdffbaehajehajhcfbgacbhedabjhfjgficihacgigaadaijbagcjdbgdijfaadgjcieahdbgjhehdeibaebbifcaebiigiaacihhgddcecdcifhdcbahjadfbdageajcieibaidgiiifhhiagbiefijiedgejehibbibiidfihdidgbcjfdacicfheeaijgccdjhihjajjeeacibjehibjibjccdgfbacdddehajedijdheidgcbgdcgdhdbiicdgcbaichcjcbhdieihccfcfagcifiheaidcegcaaibcjbhcgbcjccjddhjiejhebdafgjbhebfeghgcbdhbafigcahbehhgiadaeahhfjafadbchejacaajhabcbccchefacejddeibfcjfgadfbbbigbbceghfihaeafficfdbhaifeeifhdaejhihchfihjcjiedeahhddffcdbffgjfegaihfbjfieehggaefieafcjcddeiaijifhhbifacebdcagjfhgbhjifeaicggecjgbegdgcigdbdceabdjccfdighiehaddaciehacejcgidajhbjaaajbfecchagdhfdgjhbbdfjabjbhdfgfhadehfbdiidihghhbgiiighbgddiccdgbabgcigbaddheeiajaahideicjcdbbegfbdhfdfgggiihcebdidcijcccdcedgbaeejjafecieahhdfegdeefahbdffhdajcgfcggffahfjecgbabiedahedehddgidijdccfbhbhccehhgedjhhajhechegbehbigjdbgbacgajdafghechhefhehfajggjfbfceififfdhdeaaibacahjigbaiebegjbcijgcabaahcedbfaceeajddehgbijajihfcjajjcjifcibcdhdegbjgbchbadeeddhddficfgaddhcihhddifecbhjjeghdacdehbcijhfieecdjbagajbagceegcfbibjajifffecbbjegedbajbabadjjibgdicbfebdfijbfdbefehffdbhgcaajbegfcdajhccbacgdieeihhiahibcdffjifgafgiehadceafabfehadieceaadbhadgbdijhfechjbjdhjggjcbciafdgbafibdcddgccegibihjfggbaehcfifgfichifagdebhaficajahhjbijhfcgdcbeijjbhdechhdjdgfeicbijgcbjifchchgehbacedbfeiieggafdbcebdgiehahjeghijibceeihegefdgibcaejfehdadecidbcceceiccbichjabhhjfdgbejbdfcdgehajfcafjaccfjiiedaegehbjeahdejbfcgahgbfchgegdjeebibejibjjaaechchcidbgbafbiheeaggicggeheedhidhdejdeiecgjdifbdccgiecfdaigjeejbahcaeegdbihfbdaeaajbbejbijgaifffdchdgagfahcfidjedajbiahdahgacafedhajgeaheecehdhabbcbcjdhgdeadggabiejjciabhdagjefbdcfeffgjjbdghgchcfihacedjecgdcgbjeiidiehghcefdbjfbjchdcifcacdfgejfhcaabiacdhagecfaidjfggbhhifhjjbbhiihjcjbhddbijebafjghdbheehgecjgjefgbajjahgiadceicadfbfcciaededchcfhfeieeedehjfhdjffjefcihghhghaceefidagigbdahhjabjigccccfjjgejcdecahigheaajehedaacegghjjidedhgcbejcacibchihdifhiijiabghafehdigdegagfhhjajfegfadiaeeieicejefefbgaedgbfgedbbcgijahiegbbhbaahchabhhgiihgdcjcdbcagciijifbhajiaicacafbjddechdaafdahjeaifhcefgcacicghhcgbdhddbcecgcecghcficgdiijabffebfheedibgfifadjffjfahdeccgeagbbfcaebcegcjfghjcjaabaidecaeibfeibidjbeaijgfgcaibeiegffajbcdbejfejfdddejajbbfggcgifadjihaajhgfeccegdccdgfbdbheieecaaeiegghjedgfbcjbcebdicbjcfbchggffbdidigahgcedgaahgfhbbddajficfeggebcdgjeffhegibbjhihgaffebbdiceachdahhcgafibfhjjcbaghcgicdebghhdaicjaccaegejfhhbbhgibagcfecedafjcjaddjgccihddefgajahefbecccbjabdhieiaegfecdhcaacfebgbdcdbjfdjajbhhcbhcdjjichbaehfbhjjcdijdciaggjfjjeighhafeibbhihcjagighebeedfbedjfgejihaciaeafhhgfgdhhebdjdhicjgabhbcgdehafddcaggdaebehedcfbbbgfihhjhdgjhjabceaehfbiheagjjdihjjjdehieiaabhejiccibhdhegheacicheidacjjgjchejdiieceeaighecbhbgiffjjaccgcbefcfffabgbfaiicbcihgdidgicheacihafddafjiichajggjcggdacccheijddbdjaiacacjgdgdgbhiiccifbbffeifeccffbegbjdifdjbhcgcaighgadfjgbghgbbabiijghfcifcacgdjdjbahhjifcgcijfjdiaaidadjaddfjbhcjgbajbeeabebjeibihabjeighbfaibiedifcbeehjijifdjagbdcahcijiggbddacfdfaaabadfiaibegacibcfgejaedeidcjecdieccbjffgicgdgbajfdiaadbddgicaciafhhaheedfgejhgddjaaffehgddjcdgcihgdfcdfhacaifhbcjijcfcghcbfadbieggjaagjebicfdjbgbiihahdedbbiaigaaeifdchcbbhgbcgagaeebaidecaejahjidfdcaaaajeadbjeehdjidehhbghjjiadefijeaafaidjdcdccjabegghdjbgcbfhfajegfjgfficchgigffgicecjegijdjgdeiibhifcdafafjeiabiiefgiiieeaciicccbchjifheejbhjcegiffgjgicedaeddfffcaaieijahfhggciacchcegaehbbihfacjfaajdgdaefhdhibegaagcheebaadagdjciagdgcjbdhhbihehhcgfdcbfaaecehcigdfeigaedcfjdhejgdifajcbagcgjhhiabiiecdgaieegceejggadbgedbahccbedbddchfbegigafhbagiigfiggdcbbijheaaheifhbbacafceieebggeichjhggbbhjjahcigecicdbhdfcigbjjcdhchhdaiihcehbbcfediaadifdeadjgejcdjdiaghdbcaiabadgeijjbcjchbhjjdjbhheddiifgdihjaafecebfbieabgfehffbfchiifhefadehcjeiaghfbfbcibbddhadbfbgcieafhiadgdcbfbdbaiicbfebfejihfaieeieeahhfbbdciigbfbgagcgfiedjdgbfeheagcjbfddjehgbggcgaeehfedibfjcidcdieefecgjffedidbajahibjafhfiaieahchgfgjcbhjehdigdfgcbgaeijgagcehgibbddiiccgfggejfcfajcaechfcafhbidhaffiehaeccbjedefadjfhgcdhgfhiciihbijigehachbejigjhchfijdgaeahdjiffhjfdgiehabhachfbiifgcbbgchdihjhgihedfbjjabibfeadbfjfgjdedjifgfibcbedggedciacajdiabiidbjacijfgijhhdghhcfgdgeijbefjbachdagccgcfdcceigichhadfheijgjeaaaeddaheagffcajeabiicchgiabfeebehcehgfagffeibaffhicbacbbehgjheihegejjijaaegeihiejciaihdddieheiehibefdgaaahaebejbdfdabchggbdbhdbidihdahjfbciibfcbiidhjhfahjhbjhcjibcbdbeabeaehiecbaaeahbieaafddcfhjfjbjbhjggjcbdijhgbfehegdgdacffcbccjggcfcgjbihagebccbfeefddidjfajddebghifeieficjcbiihcjaajfdcefcciahiffbieheagfgjcjhhghcheghfiaffadgjcdjdbbadjhgfcjhdbijicbidiagcjjgcaffccbdchgfgiecdbjbaegfbdfdgcehbhhcghijidjidejcdigjiefdcdcidfgdejdhhjhigbaegjfgbceefafgejdigjhfhjihdgdgffdifichfjjjjichefffeiecgeceeejjbbfbjhgdgihhcacighacfigbbahdbhicdjhbichhhbfdjgfhjjgagijjfaahidejbjibjcgffbjgficicdijjehehcafijfbhjeihhcjacgajbidfgcjhbegiafaihfddfhfeifhfbgcfbdbjidhhjbdgibbdghcecjhbhhfadfegdbceebfadccjcgfjdadcgedhdiabaaedjabbjigehbdigibeiijdcigjihccjbfciffffffjjbcaehgcjjhgbbfjcajaegabbhiaeiadhfbcdbghejeiehdbdfhjhejfeiijchdcdbfchigjddghcaecefdjjfidiefbdhieibiggajfhdcgbcjbfdedijcfdjbcfafceabiafiagdafgfdfbdjeafdihjjbeajjggiebcibgcafahbeifhajdcjbhbjfagecdicjehechjdjjaadfgcdeajbceigihdjhijgdgecaedggbfghcdjagahiiedfaehdjijfdffhbihehjfbcjejbahdjiijdggaigdfjeahfbejccfhgiciafbeibbedebccfefaahcihbehefdddgdahijgiifdfcbgehfdjdafchhiffbcfajbeccdhjijgijgiijdeabicgcbdibihiaejgghgfbfhhjfhhifdhigabjffecieagffefhdajeeihgjgfcbcicdajhcbhgcecidjibbfjgihbihfgibdfejahfhdehdbacjffeidaeecagebdejahhfbbjgahdajecdagbgchfgddjaeidebcdebjcbihfahhgeeghcabadgagchgabefhchjibdihchhehgbhbahgjibcffeigjedegiafbaiiagfbefidjgajhfaeieegbhidahghdgfaijhchdjcbdbgceehaefacbdfcbcahccahcfgicedjcbghihgbgggafbagfefigaeeagjbhifjjdcdjgijheihjfbccabbfjaejfdgefbdgedggegjfdhjjedebdghfcjbffgbjhchcfgaccbhcggagbfebecffhecfjaachghgfjejehebgigacgibacdhfedfihehedbajegjjjcdedfjgiahbfchbdgegdedagjgcejehccibbafidafgcdiejbiafcgdacefedjheieggbhjghaifaahfifcejgcgcffiffhbijgejiicbacbgdiidcibjddagdafhjeihbcdbhcdhdjgjaijcbfcicdahafajidgfgjjbhgagehffidfjiahcdhadfdbhdjfbifejhaaidhbgicejajfbiiaefbddfjghbbgecfjfghabbbeedgddebcdcadabdiihehfdfcccefcidaejggdcjffidbicgbaifhideiecgeeiddfdjebcdccjjicaeafjjgeefjfciieehfhdijeedgdhccadfahdgbjcdcacfcgjdjeacjfbijigjabeabaeffbihjdcbibjiiggeigdjcfghjdfggbggbihajabfbaggiibbcdcbfeffbieeiiighacafbbfgegchigabbjfbfdihjgfhjgfdjjajcagdecbidfadhgaheedfidjcheicaabibbehajeebhfgbjjddefccjidcgcbhhdefecbfdeefacfgfjabbibabafbbaidigcacdfhacfgaddachaaabhgaahjgfgddjhdfcfiehdieejjafahiighcajcbbgbgjcdfgciegaegcbjgebjaaacjcihcbgbgcfghihjedbiighebdjiihjejeiabejdeeggbfdhchjcdcagddfiiibiiheibbedgcfbibjidbejjibfcbahhaecbhdhjihaaegjihbgjgbbifjcigibhbbfffjbbjjgbbjdjehgbbjafbehcbchcgdfabbijgjcdihdidaefdccejgjeihhdbjdaiaebfbaggfdhfjedjffeafdggbfabjfcdcjafdbhaaicheaihfcbffhhaejcifcafahgaejiaaggicgfceihjijjdfjbfcdedjjbjfifdbcjegaibhbbdadfahhfbbehchhegfjjjibbcaacbjgbcdjjgjfhbjgdjddbhgeihajjhbha"

#value = "a"
#value2 = "ab"
print(Solution().canConstruct(value, value2))
